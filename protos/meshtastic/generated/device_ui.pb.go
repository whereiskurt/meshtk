// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: meshtastic/device_ui.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Theme int32

const (
	// Dark
	Theme_DARK Theme = 0
	// Light
	Theme_LIGHT Theme = 1
	// Red
	Theme_RED Theme = 2
)

// Enum value maps for Theme.
var (
	Theme_name = map[int32]string{
		0: "DARK",
		1: "LIGHT",
		2: "RED",
	}
	Theme_value = map[string]int32{
		"DARK":  0,
		"LIGHT": 1,
		"RED":   2,
	}
)

func (x Theme) Enum() *Theme {
	p := new(Theme)
	*p = x
	return p
}

func (x Theme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Theme) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_device_ui_proto_enumTypes[0].Descriptor()
}

func (Theme) Type() protoreflect.EnumType {
	return &file_meshtastic_device_ui_proto_enumTypes[0]
}

func (x Theme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Theme.Descriptor instead.
func (Theme) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{0}
}

// Localization
type Language int32

const (
	// English
	Language_ENGLISH Language = 0
	// French
	Language_FRENCH Language = 1
	// German
	Language_GERMAN Language = 2
	// Italian
	Language_ITALIAN Language = 3
	// Portuguese
	Language_PORTUGUESE Language = 4
	// Spanish
	Language_SPANISH Language = 5
	// Swedish
	Language_SWEDISH Language = 6
	// Finnish
	Language_FINNISH Language = 7
	// Polish
	Language_POLISH Language = 8
	// Turkish
	Language_TURKISH Language = 9
	// Serbian
	Language_SERBIAN Language = 10
	// Russian
	Language_RUSSIAN Language = 11
	// Dutch
	Language_DUTCH Language = 12
	// Greek
	Language_GREEK Language = 13
	// Norwegian
	Language_NORWEGIAN Language = 14
	// Slovenian
	Language_SLOVENIAN Language = 15
	// Ukrainian
	Language_UKRAINIAN Language = 16
	// Simplified Chinese (experimental)
	Language_SIMPLIFIED_CHINESE Language = 30
	// Traditional Chinese (experimental)
	Language_TRADITIONAL_CHINESE Language = 31
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0:  "ENGLISH",
		1:  "FRENCH",
		2:  "GERMAN",
		3:  "ITALIAN",
		4:  "PORTUGUESE",
		5:  "SPANISH",
		6:  "SWEDISH",
		7:  "FINNISH",
		8:  "POLISH",
		9:  "TURKISH",
		10: "SERBIAN",
		11: "RUSSIAN",
		12: "DUTCH",
		13: "GREEK",
		14: "NORWEGIAN",
		15: "SLOVENIAN",
		16: "UKRAINIAN",
		30: "SIMPLIFIED_CHINESE",
		31: "TRADITIONAL_CHINESE",
	}
	Language_value = map[string]int32{
		"ENGLISH":             0,
		"FRENCH":              1,
		"GERMAN":              2,
		"ITALIAN":             3,
		"PORTUGUESE":          4,
		"SPANISH":             5,
		"SWEDISH":             6,
		"FINNISH":             7,
		"POLISH":              8,
		"TURKISH":             9,
		"SERBIAN":             10,
		"RUSSIAN":             11,
		"DUTCH":               12,
		"GREEK":               13,
		"NORWEGIAN":           14,
		"SLOVENIAN":           15,
		"UKRAINIAN":           16,
		"SIMPLIFIED_CHINESE":  30,
		"TRADITIONAL_CHINESE": 31,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_meshtastic_device_ui_proto_enumTypes[1].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_meshtastic_device_ui_proto_enumTypes[1]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{1}
}

type DeviceUIConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A version integer used to invalidate saved files when we make incompatible changes.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// TFT display brightness 1..255
	ScreenBrightness uint32 `protobuf:"varint,2,opt,name=screen_brightness,json=screenBrightness,proto3" json:"screen_brightness,omitempty"`
	// Screen timeout 0..900
	ScreenTimeout uint32 `protobuf:"varint,3,opt,name=screen_timeout,json=screenTimeout,proto3" json:"screen_timeout,omitempty"`
	// Screen/Settings lock enabled
	ScreenLock   bool   `protobuf:"varint,4,opt,name=screen_lock,json=screenLock,proto3" json:"screen_lock,omitempty"`
	SettingsLock bool   `protobuf:"varint,5,opt,name=settings_lock,json=settingsLock,proto3" json:"settings_lock,omitempty"`
	PinCode      uint32 `protobuf:"varint,6,opt,name=pin_code,json=pinCode,proto3" json:"pin_code,omitempty"`
	// Color theme
	Theme Theme `protobuf:"varint,7,opt,name=theme,proto3,enum=meshtastic.Theme" json:"theme,omitempty"`
	// Audible message, banner and ring tone
	AlertEnabled  bool   `protobuf:"varint,8,opt,name=alert_enabled,json=alertEnabled,proto3" json:"alert_enabled,omitempty"`
	BannerEnabled bool   `protobuf:"varint,9,opt,name=banner_enabled,json=bannerEnabled,proto3" json:"banner_enabled,omitempty"`
	RingToneId    uint32 `protobuf:"varint,10,opt,name=ring_tone_id,json=ringToneId,proto3" json:"ring_tone_id,omitempty"`
	// Localization
	Language Language `protobuf:"varint,11,opt,name=language,proto3,enum=meshtastic.Language" json:"language,omitempty"`
	// Node list filter
	NodeFilter *NodeFilter `protobuf:"bytes,12,opt,name=node_filter,json=nodeFilter,proto3" json:"node_filter,omitempty"`
	// Node list highlightening
	NodeHighlight *NodeHighlight `protobuf:"bytes,13,opt,name=node_highlight,json=nodeHighlight,proto3" json:"node_highlight,omitempty"`
	// 8 integers for screen calibration data
	CalibrationData []byte `protobuf:"bytes,14,opt,name=calibration_data,json=calibrationData,proto3" json:"calibration_data,omitempty"`
	// Map related data
	MapData       *Map `protobuf:"bytes,15,opt,name=map_data,json=mapData,proto3" json:"map_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceUIConfig) Reset() {
	*x = DeviceUIConfig{}
	mi := &file_meshtastic_device_ui_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceUIConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUIConfig) ProtoMessage() {}

func (x *DeviceUIConfig) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_device_ui_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUIConfig.ProtoReflect.Descriptor instead.
func (*DeviceUIConfig) Descriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceUIConfig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceUIConfig) GetScreenBrightness() uint32 {
	if x != nil {
		return x.ScreenBrightness
	}
	return 0
}

func (x *DeviceUIConfig) GetScreenTimeout() uint32 {
	if x != nil {
		return x.ScreenTimeout
	}
	return 0
}

func (x *DeviceUIConfig) GetScreenLock() bool {
	if x != nil {
		return x.ScreenLock
	}
	return false
}

func (x *DeviceUIConfig) GetSettingsLock() bool {
	if x != nil {
		return x.SettingsLock
	}
	return false
}

func (x *DeviceUIConfig) GetPinCode() uint32 {
	if x != nil {
		return x.PinCode
	}
	return 0
}

func (x *DeviceUIConfig) GetTheme() Theme {
	if x != nil {
		return x.Theme
	}
	return Theme_DARK
}

func (x *DeviceUIConfig) GetAlertEnabled() bool {
	if x != nil {
		return x.AlertEnabled
	}
	return false
}

func (x *DeviceUIConfig) GetBannerEnabled() bool {
	if x != nil {
		return x.BannerEnabled
	}
	return false
}

func (x *DeviceUIConfig) GetRingToneId() uint32 {
	if x != nil {
		return x.RingToneId
	}
	return 0
}

func (x *DeviceUIConfig) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ENGLISH
}

func (x *DeviceUIConfig) GetNodeFilter() *NodeFilter {
	if x != nil {
		return x.NodeFilter
	}
	return nil
}

func (x *DeviceUIConfig) GetNodeHighlight() *NodeHighlight {
	if x != nil {
		return x.NodeHighlight
	}
	return nil
}

func (x *DeviceUIConfig) GetCalibrationData() []byte {
	if x != nil {
		return x.CalibrationData
	}
	return nil
}

func (x *DeviceUIConfig) GetMapData() *Map {
	if x != nil {
		return x.MapData
	}
	return nil
}

type NodeFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter unknown nodes
	UnknownSwitch bool `protobuf:"varint,1,opt,name=unknown_switch,json=unknownSwitch,proto3" json:"unknown_switch,omitempty"`
	// Filter offline nodes
	OfflineSwitch bool `protobuf:"varint,2,opt,name=offline_switch,json=offlineSwitch,proto3" json:"offline_switch,omitempty"`
	// Filter nodes w/o public key
	PublicKeySwitch bool `protobuf:"varint,3,opt,name=public_key_switch,json=publicKeySwitch,proto3" json:"public_key_switch,omitempty"`
	// Filter based on hops away
	HopsAway int32 `protobuf:"varint,4,opt,name=hops_away,json=hopsAway,proto3" json:"hops_away,omitempty"`
	// Filter nodes w/o position
	PositionSwitch bool `protobuf:"varint,5,opt,name=position_switch,json=positionSwitch,proto3" json:"position_switch,omitempty"`
	// Filter nodes by matching name string
	NodeName string `protobuf:"bytes,6,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Filter based on channel
	Channel       int32 `protobuf:"varint,7,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeFilter) Reset() {
	*x = NodeFilter{}
	mi := &file_meshtastic_device_ui_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeFilter) ProtoMessage() {}

func (x *NodeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_device_ui_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeFilter.ProtoReflect.Descriptor instead.
func (*NodeFilter) Descriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{1}
}

func (x *NodeFilter) GetUnknownSwitch() bool {
	if x != nil {
		return x.UnknownSwitch
	}
	return false
}

func (x *NodeFilter) GetOfflineSwitch() bool {
	if x != nil {
		return x.OfflineSwitch
	}
	return false
}

func (x *NodeFilter) GetPublicKeySwitch() bool {
	if x != nil {
		return x.PublicKeySwitch
	}
	return false
}

func (x *NodeFilter) GetHopsAway() int32 {
	if x != nil {
		return x.HopsAway
	}
	return 0
}

func (x *NodeFilter) GetPositionSwitch() bool {
	if x != nil {
		return x.PositionSwitch
	}
	return false
}

func (x *NodeFilter) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeFilter) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

type NodeHighlight struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hightlight nodes w/ active chat
	ChatSwitch bool `protobuf:"varint,1,opt,name=chat_switch,json=chatSwitch,proto3" json:"chat_switch,omitempty"`
	// Highlight nodes w/ position
	PositionSwitch bool `protobuf:"varint,2,opt,name=position_switch,json=positionSwitch,proto3" json:"position_switch,omitempty"`
	// Highlight nodes w/ telemetry data
	TelemetrySwitch bool `protobuf:"varint,3,opt,name=telemetry_switch,json=telemetrySwitch,proto3" json:"telemetry_switch,omitempty"`
	// Highlight nodes w/ iaq data
	IaqSwitch bool `protobuf:"varint,4,opt,name=iaq_switch,json=iaqSwitch,proto3" json:"iaq_switch,omitempty"`
	// Highlight nodes by matching name string
	NodeName      string `protobuf:"bytes,5,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeHighlight) Reset() {
	*x = NodeHighlight{}
	mi := &file_meshtastic_device_ui_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHighlight) ProtoMessage() {}

func (x *NodeHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_device_ui_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHighlight.ProtoReflect.Descriptor instead.
func (*NodeHighlight) Descriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{2}
}

func (x *NodeHighlight) GetChatSwitch() bool {
	if x != nil {
		return x.ChatSwitch
	}
	return false
}

func (x *NodeHighlight) GetPositionSwitch() bool {
	if x != nil {
		return x.PositionSwitch
	}
	return false
}

func (x *NodeHighlight) GetTelemetrySwitch() bool {
	if x != nil {
		return x.TelemetrySwitch
	}
	return false
}

func (x *NodeHighlight) GetIaqSwitch() bool {
	if x != nil {
		return x.IaqSwitch
	}
	return false
}

func (x *NodeHighlight) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type GeoPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Zoom level
	Zoom int32 `protobuf:"varint,1,opt,name=zoom,proto3" json:"zoom,omitempty"`
	// Coordinate: latitude
	Latitude int32 `protobuf:"varint,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Coordinate: longitude
	Longitude     int32 `protobuf:"varint,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoPoint) Reset() {
	*x = GeoPoint{}
	mi := &file_meshtastic_device_ui_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPoint) ProtoMessage() {}

func (x *GeoPoint) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_device_ui_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPoint.ProtoReflect.Descriptor instead.
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{3}
}

func (x *GeoPoint) GetZoom() int32 {
	if x != nil {
		return x.Zoom
	}
	return 0
}

func (x *GeoPoint) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoPoint) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type Map struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Home coordinates
	Home *GeoPoint `protobuf:"bytes,1,opt,name=home,proto3" json:"home,omitempty"`
	// Map tile style
	Style string `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
	// Map scroll follows GPS
	FollowGps     bool `protobuf:"varint,3,opt,name=follow_gps,json=followGps,proto3" json:"follow_gps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Map) Reset() {
	*x = Map{}
	mi := &file_meshtastic_device_ui_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_meshtastic_device_ui_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_meshtastic_device_ui_proto_rawDescGZIP(), []int{4}
}

func (x *Map) GetHome() *GeoPoint {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *Map) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *Map) GetFollowGps() bool {
	if x != nil {
		return x.FollowGps
	}
	return false
}

var File_meshtastic_device_ui_proto protoreflect.FileDescriptor

var file_meshtastic_device_ui_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x65,
	0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x22, 0xfa, 0x04, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x05, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x61, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x07, 0x6d, 0x61,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x83, 0x02, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x6f, 0x70, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x73, 0x41, 0x77, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xc0, 0x01, 0x0a, 0x0d,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x61, 0x71, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x61, 0x71, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x58,
	0x0a, 0x08, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x64, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12,
	0x28, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x47, 0x70, 0x73, 0x2a, 0x25,
	0x0a, 0x05, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x52, 0x4b, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x52, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x9a, 0x02, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x47, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x52, 0x45, 0x4e, 0x43, 0x48, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47,
	0x45, 0x52, 0x4d, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x54, 0x41, 0x4c, 0x49,
	0x41, 0x4e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x47, 0x55, 0x45,
	0x53, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x41, 0x4e, 0x49, 0x53, 0x48, 0x10,
	0x05, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x57, 0x45, 0x44, 0x49, 0x53, 0x48, 0x10, 0x06, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x49, 0x4e, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x4f, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x55, 0x52, 0x4b, 0x49,
	0x53, 0x48, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x42, 0x49, 0x41, 0x4e, 0x10,
	0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x53, 0x53, 0x49, 0x41, 0x4e, 0x10, 0x0b, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x55, 0x54, 0x43, 0x48, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x45,
	0x45, 0x4b, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x52, 0x57, 0x45, 0x47, 0x49, 0x41,
	0x4e, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4c, 0x4f, 0x56, 0x45, 0x4e, 0x49, 0x41, 0x4e,
	0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4b, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x41, 0x4e, 0x10,
	0x10, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f,
	0x43, 0x48, 0x49, 0x4e, 0x45, 0x53, 0x45, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x53, 0x45,
	0x10, 0x1f, 0x42, 0x63, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x65, 0x65, 0x6b, 0x73, 0x76,
	0x69, 0x6c, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x42, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x49, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0xaa, 0x02, 0x14,
	0x4d, 0x65, 0x73, 0x68, 0x74, 0x61, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x73, 0xba, 0x02, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_meshtastic_device_ui_proto_rawDescOnce sync.Once
	file_meshtastic_device_ui_proto_rawDescData []byte
)

func file_meshtastic_device_ui_proto_rawDescGZIP() []byte {
	file_meshtastic_device_ui_proto_rawDescOnce.Do(func() {
		file_meshtastic_device_ui_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_meshtastic_device_ui_proto_rawDesc), len(file_meshtastic_device_ui_proto_rawDesc)))
	})
	return file_meshtastic_device_ui_proto_rawDescData
}

var file_meshtastic_device_ui_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_meshtastic_device_ui_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_meshtastic_device_ui_proto_goTypes = []any{
	(Theme)(0),             // 0: meshtastic.Theme
	(Language)(0),          // 1: meshtastic.Language
	(*DeviceUIConfig)(nil), // 2: meshtastic.DeviceUIConfig
	(*NodeFilter)(nil),     // 3: meshtastic.NodeFilter
	(*NodeHighlight)(nil),  // 4: meshtastic.NodeHighlight
	(*GeoPoint)(nil),       // 5: meshtastic.GeoPoint
	(*Map)(nil),            // 6: meshtastic.Map
}
var file_meshtastic_device_ui_proto_depIdxs = []int32{
	0, // 0: meshtastic.DeviceUIConfig.theme:type_name -> meshtastic.Theme
	1, // 1: meshtastic.DeviceUIConfig.language:type_name -> meshtastic.Language
	3, // 2: meshtastic.DeviceUIConfig.node_filter:type_name -> meshtastic.NodeFilter
	4, // 3: meshtastic.DeviceUIConfig.node_highlight:type_name -> meshtastic.NodeHighlight
	6, // 4: meshtastic.DeviceUIConfig.map_data:type_name -> meshtastic.Map
	5, // 5: meshtastic.Map.home:type_name -> meshtastic.GeoPoint
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_meshtastic_device_ui_proto_init() }
func file_meshtastic_device_ui_proto_init() {
	if File_meshtastic_device_ui_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_meshtastic_device_ui_proto_rawDesc), len(file_meshtastic_device_ui_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_meshtastic_device_ui_proto_goTypes,
		DependencyIndexes: file_meshtastic_device_ui_proto_depIdxs,
		EnumInfos:         file_meshtastic_device_ui_proto_enumTypes,
		MessageInfos:      file_meshtastic_device_ui_proto_msgTypes,
	}.Build()
	File_meshtastic_device_ui_proto = out.File
	file_meshtastic_device_ui_proto_goTypes = nil
	file_meshtastic_device_ui_proto_depIdxs = nil
}
